import cv2 as cv
import rasterio, os
from functions.pre_processing import set_params, create_output_dirs
from classes.find_plots import find_plots
from classes.optimize_plots import optimize_plots
import matplotlib.pyplot as plt

class plot_finder_job:
    def __init__(self, params_path):
        # Set Everything Up
        self.pre_process(params_path)
    
    def pre_process(self, params_path):
        self.params = set_params(params_path)
        # Pull the image name
        self.params["img_name"] = os.path.splitext(os.path.basename(self.params["img_path"]))[0]

        # Extracting the meta data
        with rasterio.open(self.params["img_path"]) as src:
            self.meta_data = src.meta

        # Reading in the image
        self.img_ortho = cv.imread(self.params["img_path"])
        
        #Creating the output directories
        self.output_paths = create_output_dirs(self.params)   

    def run(self):
        self.print_plot_finder_logo(intro = True)

        if self.params["find_plots"] == True:
            # Finding the plots
            find_plots(self)

        if self.params["optimize_plots"] == True:
            # Optimizing the plots
            optimize_plots(self)

        self.print_plot_finder_logo(intro = False)

    def print_plot_finder_logo(self, intro = True):
        # Plotting the log
        banner = [
                "              ____   __        __     ______ _             __           ",
                "             / __ \ / /____   / /_   / ____/(_)____   ____/ /___   _____",
                "            / /_/ // // __ \ / __/  / /_   / // __ \ / __  // _ \ / ___/",
                "           / ____// // /_/ // /_   / __/  / // / / // /_/ //  __// /    ",
                "          /_/    /_/ \____/ \__/  /_/    /_//_/ /_/ \__,_/ \___//_/     "
        ]
        
        logo = [
                "%%%%%%%%%%%%%%%%%%%%%%%%%%&&&&&&&&&&&&&&&&&&&&&&@@@@@@@@@@@@@@@@@@@@@@@&&&&&&&&@",
                "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%&&&&&&&&&&&&&&&&&@@@@@@@@@@@@@@@@@@@@@@@@&&&&&&&&&",
                "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%&&&&&&&&&&&&&&&&@@@@@@@@@@@@@@@@@@@@@@@&&&&&&&&&&",
                "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%&&&&&&,,,,,,,%&@@@@@@@@@@@@@@@@@@@@@@@&&&&&&&&&&&",
                "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%&&&,,,,@@@@@,,,,&@@@@@@@@@@@@@@@@@@@@@&&&&&&&&&&&",
                "%%%%%%%%%%%%%%%%%%%%%%%%%%%%*,,,,,,@@@@@,@@@@&,,,,,,/&@@@@@@@@@@@@@@&&&&&&&&&&&&",
                "%%%%%%%%%%%%%%%%%%%%%%%%%,,,@@@@@@@@@@,@@@,@@@@@@@@@@,,,&&@@@@@@@@@&&&&&&&&&&&&&",
                "%%%%%%%%%%%%%%%%%%%%%%%,,%@@,@@@@,,&@@@,@,@@@@,,@@@&,@@(,,&&@@@@@@@&&&&&&&&&&&&&",
                "%%%%%%%%%%%%%%%%%%%%%/,,@@,@@@@@,,/@&@@,@,@@(@%,/@@@@@,@@,,#&@@@@@&&&&&&&&&&&&&&",
                "%%%%%%%%%%%%%&&&&&&&*,,@@@@@%@@@@,,,,/@@@@@*,,,,@@@@&@@&@@,,(&&@@&&&&&&&&&&&&&&&",
                "%%%%&&&&&&&&&&&&&&&&,,@@&@@@@@@@*,,,,,,,(,,,,,,,*@@@@@@@#@@,,&&&@&&&&&&&&&&&&&&&",
                "&&&&&&&&&&&&&&&&&&&,,@@,@@@@@@,,,,,,,,,,,,,,,,,,,,,@@@@@@,@@,,%&&&&&&&&&&&&&&&&&",
                "&&&&&&&&&&&&&&&&&&@,,@@@@@@@(,,,,,,,,,,,@,,,,,,,,,,,&@@@@@@@,,%%&&&&&&&&&&&&&&&&",
                "&&&&&&&&&&&&&&&&&&#,,@/%@@@@,,@@@@@,,,,(@,,,,,,@@@@,,@@@@%#@,,%%%&&&&&&&&&&&&&&&",
                "&&&&&&&&&&&&&&&&&&*,(@,@@@@,,,,@@@,,,,,@@@,,,,,,@*,,,,@@@@*@*,/#%&&&&&&&&&&&&&&&",
                "&&&&&&&&&&&&&&&&&&/,/@,@@@@,,,,,@@#,,,,@@@,,,,,@@,,,,,@@@@/@,,(#%&&&&&&&&&&&&&&&",
                "&&&&&&&&&&&&&&&&&&%,,@&@@@@,,,,,#@@,,,@@@@@,,,#@,,,,,,@@@@@@,,%%%&&&&&&&&&&&&&&&",
                "&&&&&&&&&&&&&&&&&%%,,@@,@@@,,,,,,@@@,,@@(@@,,,@@,,,,,*@@@,@@,,#%%&&&&&&&&&&&&&&&",
                "&&&&&&&&&&&&&&&&&%%,,@@,@@@@,,,,,,@@,*@@,@@@,@@,,,,,,@@@@,@&,,#%&&&&&&&&&&&&&&&&",
                "&&&&&&&%%%%%%%%%%%%%,,@@,@@@(,,,,,@@@@@,,#@@,@@,,,,,%@@@,@@,,##%&&&&&&&&&&&&&&&&",
                "&&&&&&&&&%%%%%%%%%%%,,/@&@@@@,,,,,,@@@@,,,@@@@,,,,,,@@@@@@,,*#%&&&&&&&&&&&&@&&&&",
                "&&&&&&&&&&%%%%%%%%%%%,,@@*@@@@/,,,,@@@*,,,#@@@,,,,(@@@@(@@,,#%%&&&&&&&&&@@@@@&&&",
                "&&&&&&&&&&&%%%%%%%%%%%,,@@*@@@@,,,,,@@,,,,,@@,,,,,@@@@#@@,,#%%&&&&&&&&@@@@@@@@&&",
                "&&&&&&%%%&&&&%%%%%%%%%%,,@@@&@@@@,,,*@,,,,,%(,,*@@@@*@@%,,#%%&&&&&&@@@@@@@@@@@@@",
                "&&&%%%%%%%%%&&%%%%%%%%%%,,,@@,@@@@@,,,,,,,,,,,@@@@@,@@,,/#%%&&&&&@@@@@@@@@@@@@@@",
                "%%%%%%%%%%%%%&&&%%%%%%%%%#,,%@@,@@@@@@,,,,,@@@@@@,@@(,,##%&&&&@@@@@@@@@@@@@@@@@@",
                "%%%%%%%%&&&&&&&&&%%%%%%%%%%%,,,@@(&@,@@@@@@@,@(%@@,,,##%%&&&@@@@@@@@@@@@@@@@@@@@",
                "%%%%&&&&&&&&&&&&&&%%%%%%%%%%%#,,,#@@@*,@@@,*@@@(,,,##%%&&&&&&&&&&@@@@@@@@@@@@@@@",
                "&&&&&&&&&&&&&&&&&&&&%%%%%%%%%%%##,,,,,@#@*&,,,,*##%%&&&&&&&&&&%%%%%%%@@@@@@@@@@@",
                "&&&&&&&&&&&&&&&&&&&&&%%%%%%%%%%%%%%%%%#,,,####%%%&&&&&&&&&&&&%%%%%%%%%%%%%@@@@@@"
        ]
        
        for element in banner:
            print(element)
        print("\n")
        for element in logo:
            print(element)

        if intro == True:
            print(f"Using {self.params['num_cores']} cores to process image")
            print(f"Reading Images from: \n{self.params['img_path']} \nSaving Output to: \n{self.params['output_path']}")

        else:
            print(f"""Finished Processing Image: {self.params['img_name']}
            Thanks for using PLot Finder! Keep on Keeping on - Squid Billy Willy""")

                                                              